import { v4 as uuidv4 } from 'uuid';

export interface IUser {
  id: string;
  name: string;
  login: string;
  password: string;
}

type IUserResponse = {
  id: string;
  name: string;
  login: string;
};

export interface IUserProps {
  name: string;
  login: string;
  password: string;
}

/**
 * User model
 * This class is used in order to create a new user instance in db
 */

/**
 * Class constructor
 * @param {object} params
 * @param {string} name - name of a user
 * @param {string} login - login of a user
 * @param {string} password - user password
 * @param {string} id - user id, be default generated by UUID
 */

class User implements IUser {
  id: string = uuidv4();

  name: string;

  login: string;

  password: string;

  constructor({
    name = 'USER',
    login = 'user',
    password = 'P@55w0rd',
  }: IUserProps) {
    this.name = name;
    this.login = login;
    this.password = password;
  }

  /**
   * Static method returns id, name, login as a response to request
   * @param {User} user - object with user from db
   * @returns {{name, id, login}}
   */

  static toResponse(user: IUser): IUserResponse {
    const { id, name, login } = user;
    return { id, name, login };
  }
}

export default User;
